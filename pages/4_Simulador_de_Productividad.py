# Contenido COMPLETO y FINAL para: pages/4_Simulador_de_Productividad.py

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
from utils import load_data, reconstruir_tabla_base

st.set_page_config(page_title="Simulador de Productividad", page_icon="‚öôÔ∏è", layout="wide")

st.title("‚öôÔ∏è Simulador de Eficiencia Productiva")

st.info(
    """
    La m√©trica "Productividad (%)", tambi√©n conocida como "Diferencia VS Gen√©tica", es un par√°metro zoot√©cnico avanzado dise√±ado para cuantificar la eficiencia de la conversi√≥n alimenticia en un lote de aves. Su metodolog√≠a a√≠sla la eficiencia metab√≥lica al comparar el peso real promedio del lote contra el est√°ndar gen√©tico (benchmark) para una cantidad de alimento consumido espec√≠fica. A diferencia del √çndice de Conversi√≥n Alimenticia (ICA), este enfoque no se ve afectado por variaciones en el apetito, centr√°ndose exclusivamente en la calidad de la conversi√≥n.

Un resultado positivo indica un rendimiento superior al est√°ndar, producto de una nutrici√≥n, sanidad y manejo √≥ptimos. En contraste, un resultado negativo es una se√±al de alerta cr√≠tica que revela una ineficiencia productiva. Esta puede originarse por diversos factores, principalmente:

Calidad del Alimento: Una densidad nutricional inferior a la especificada.

Sanidad del Lote: Desaf√≠os sanitarios, incluso subcl√≠nicos, que desv√≠an nutrientes del crecimiento hacia la respuesta inmune.

Infraestructura de la Granja: Instalaciones con obsolescencia, pobre aislamiento o sistemas de ventilaci√≥n deficientes que limitan la capacidad de mitigar el estr√©s ambiental, obligando a las aves a desviar energ√≠a del crecimiento hacia la termorregulaci√≥n.

Manejo y Ambiente: Factores de estr√©s como temperaturas inadecuadas, mala calidad del aire o alta densidad.

Desde la perspectiva de costos, esta m√©trica es fundamental. Una productividad negativa significa que cada kilogramo de alimento ‚Äîla principal inversi√≥n del ciclo‚Äî rinde menos de su potencial, lo que infla directamente el costo final por kilogramo de carne producido y permite a la gerencia diagnosticar el origen del problema con mayor precisi√≥n.
    """
)

if 'resultados_base' not in st.session_state:
    st.warning("üëà Por favor, ejecuta un c√°lculo en la p√°gina '1_Presupuesto_Principal' primero.")
    st.stop()

try:
    resultados_base = st.session_state['resultados_base']
    productividad_base_perc = st.session_state.get('productividad', 100.0)
    
    costo_total_alimento = resultados_base.get('costo_total_alimento', 0)
    costo_total_pollitos = resultados_base.get('costo_total_pollitos', 0)
    costo_total_otros = resultados_base.get('costo_total_otros', 0)
    costo_total_lote = costo_total_alimento + costo_total_pollitos + costo_total_otros

    consumo_total_kg = resultados_base.get('consumo_total_kg', 0)
    
    kilos_base_ajustados = resultados_base.get('kilos_totales_producidos', 0)
    if productividad_base_perc == 0:
        st.error("La productividad base no puede ser cero.")
        st.stop()
    kilos_potenciales_100 = kilos_base_ajustados / (productividad_base_perc / 100.0)

    # =============================================================================
    # --- 1. Simulador Interactivo de Productividad ---
    # =============================================================================
    st.header("1. Simulador Interactivo de Productividad")
    st.write("Ajusta el slider para simular c√≥mo una variaci√≥n en la productividad general afecta tus costos.")

    productividad_sim_perc = st.slider(
        "Seleccione la Productividad (%) a simular", 
        min_value=70.0, max_value=110.0, value=productividad_base_perc, step=0.5, format="%.1f%%"
    )

    kilos_producidos_sim = kilos_potenciales_100 * (productividad_sim_perc / 100.0)

    if kilos_producidos_sim > 0:
        costo_total_kilo_sim = costo_total_lote / kilos_producidos_sim
        conversion_sim = consumo_total_kg / kilos_producidos_sim
    else:
        costo_total_kilo_sim = 0
        conversion_sim = 0

    st.markdown("##### Resultados de la Simulaci√≥n")
    kpi_cols = st.columns(2)
    kpi_cols[0].metric(
        label="Costo Total por Kilo Simulado", 
        value=f"${costo_total_kilo_sim:,.2f}",
        delta=f"${costo_total_kilo_sim - resultados_base.get('costo_total_por_kilo', 0):,.2f}",
        delta_color="inverse"
    )
    kpi_cols[1].metric(
        label="Conversi√≥n Alimenticia Simulada",
        value=f"{conversion_sim:,.3f}",
        delta=f"{conversion_sim - resultados_base.get('conversion_alimenticia', 0):,.3f}",
        delta_color="inverse"
    )

    # =============================================================================
    # --- 2. An√°lisis de Sensibilidad por Productividad ---
    # =============================================================================
    st.markdown("---")
    st.header("2. An√°lisis de Sensibilidad por Productividad")
    st.write(f"""
    Esta tabla y gr√°fico muestran c√≥mo cambian los indicadores clave. La fila resaltada corresponde a la 
    productividad definida en la p√°gina principal ({productividad_base_perc}%).
    """)

    resultados_sensibilidad = []
    niveles_productividad = sorted(list(set([100.0, 97.5, 95.0, 90.0, 85.0, 80.0, 75.0, productividad_base_perc])), reverse=True)

    for prod_perc in niveles_productividad:
        kilos_sim = kilos_potenciales_100 * (prod_perc / 100.0)
        
        if kilos_sim > 0:
            costo_kilo = costo_total_lote / kilos_sim
            conversion = consumo_total_kg / kilos_sim
            costo_alimento_kilo = costo_total_alimento / kilos_sim
            costo_pollito_kilo = costo_total_pollitos / kilos_sim
            costo_otros_kilo = costo_total_otros / kilos_sim
        else:
            costo_kilo = conversion = costo_alimento_kilo = costo_pollito_kilo = costo_otros_kilo = 0

        resultados_sensibilidad.append({
            "Productividad (%)": prod_perc,
            "Kilos Producidos": kilos_sim,
            "Conversi√≥n": conversion,
            "Costo Alimento/Kilo": costo_alimento_kilo,
            "Costo Pollito/Kilo": costo_pollito_kilo,
            "Costo Otros/Kilo": costo_otros_kilo,
            "Costo Total/Kilo": costo_kilo
        })

    df_sensibilidad = pd.DataFrame(resultados_sensibilidad)

    def highlight_base(row):
        is_base = row["Productividad (%)"] == productividad_base_perc
        return ['background-color: #D6EAF8' if is_base else '' for _ in row]

    st.dataframe(
        df_sensibilidad.style
        .apply(highlight_base, axis=1)
        .format({
            "Productividad (%)": "{:,.1f}%", "Kilos Producidos": "{:,.0f}",
            "Conversi√≥n": "{:,.3f}", "Costo Alimento/Kilo": "${:,.2f}",
            "Costo Pollito/Kilo": "${:,.2f}", "Costo Otros/Kilo": "${:,.2f}",
            "Costo Total/Kilo": "${:,.2f}"
        })
        .background_gradient(cmap='Reds', subset=['Costo Total/Kilo', 'Conversi√≥n'])
        .set_properties(**{'text-align': 'center'})
    )
    
    # =============================================================================
    # --- 3. Visualizaci√≥n del Impacto de la Productividad en los Costos ---
    # =============================================================================
    st.markdown("---")
    st.header("3. Impacto de la Productividad en el Costo por Kilo")
    st.write("""
    Este gr√°fico muestra c√≥mo el costo total por kilo y sus componentes aumentan a medida que disminuye la eficiencia productiva del lote.
    """)

    df_chart = df_sensibilidad.set_index("Productividad (%)")
    
    # Seleccionamos las columnas de costos por kilo
    df_cost_lines = df_chart[[
        "Costo Alimento/Kilo", 
        "Costo Pollito/Kilo", 
        "Costo Otros/Kilo",
        "Costo Total/Kilo"
    ]]
    
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Graficar las l√≠neas con un marcador en cada punto
    df_cost_lines.plot(kind='line', ax=ax, marker='o')
    
    # Formatear el eje Y como moneda
    from matplotlib.ticker import StrMethodFormatter
    ax.yaxis.set_major_formatter(StrMethodFormatter('${x:,.0f}'))
    
    # Mejorar la visualizaci√≥n
    ax.set_ylabel("Costo por Kilo ($)")
    ax.set_xlabel("Productividad (%)")
    ax.set_title("Sensibilidad del Costo por Kilo a la Productividad")
    ax.legend(title="Componente de Costo")
    ax.grid(True, linestyle='--', alpha=0.6)
    
    # Invertir el eje X para que la "ca√≠da" de productividad se lea de izquierda a derecha
    ax.invert_xaxis()
    
    plt.tight_layout()
    st.pyplot(fig)

except Exception as e:
    st.error(f"Ocurri√≥ un error al procesar la simulaci√≥n: {e}")
    st.exception(e)
